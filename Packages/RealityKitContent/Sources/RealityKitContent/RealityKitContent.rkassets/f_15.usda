#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["f_15_2", "Cockpit", "RightWingSpars", "RightFlips", "LeftFlips", "RightEngine", "LeftEngine", "HorStable_R", "VerStable_R", "VerStable_L", "TransparentMaterial", "HorStable_L", "LeftWingSpars"]
    def "f_15_2" (
        active = true
        customData = {
            float3 rotationEulerHint = (4.7123885, 0, 0)
        }
        references = @f_15_2.usdc@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (0.1, 0.1, 0.1)
        float3 xformOp:translate = (0, 1, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Sphere "Cockpit" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        float3 xformOp:translate = (0, 1.3, 0.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Cockpit/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Cockpit"
        }
    }

    def Sphere "LeftWingSpars" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 1.25, -0.2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/LeftWingSpars/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Wing Spars (Left)"
        }
    }

    def Sphere "RightWingSpars" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "RealityKitContent_PointOfInterestComponent"]
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 1.25, -0.2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/RightWingSpars/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Wing Spars (Right)"
        }
    }

    def Sphere "RightFlips" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "RealityKitContent_PointOfInterestComponent"]
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 1.25, -0.4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/RightFlips/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Flips (Right)"
        }
    }

    def Sphere "LeftFlips" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 1.25, -0.4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/LeftFlips/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Flips (Left)"
        }
    }

    def Sphere "RightEngine" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "RealityKitContent_PointOfInterestComponent"]
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.09, 1.25, -0.75)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/RightEngine/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Engine (Right)"
        }
    }

    def Sphere "LeftEngine" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "RealityKitContent_PointOfInterestComponent"]
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.09, 1.25, -0.75)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/LeftEngine/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Engine (Left)"
        }
    }

    def Sphere "HorStable_L" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3, 1.25, -0.8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/HorStable_L/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Horizontal Stabilizer (Left)"
        }
    }

    def Sphere "HorStable_R" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.3, 1.25, -0.8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/HorStable_R/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Horizontal Stabilizer (Right)"
        }
    }

    def Sphere "VerStable_R" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.2, 1.3, -0.9)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/VerStable_R/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Vertical Stabilizer (Right)"
        }
    }

    def Sphere "VerStable_L" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </TransparentMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.2, 1.3, -0.9)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/VerStable_L/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PointOfInterestComponent"
        {
            uniform token info:id = "RealityKitContent.PointOfInterestComponent"
            string name = "Vertical Stabilizer (Left)"
        }
    }
}

def Material "TransparentMaterial"
{
    prepend token outputs:mtlx:surface.connect = </TransparentMaterial/PreviewSurface.outputs:out>
    token outputs:realitykit:vertex
    token outputs:surface.connect = </TransparentMaterial/UsdPreviewSurface.outputs:surface>
    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:mtlx:surface"]
    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
    float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
    int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 5

    def Shader "UsdPreviewSurface" (
        active = false
    )
    {
        uniform token info:id = "UsdPreviewSurface"
        token outputs:surface
    }

    def Shader "PreviewSurface"
    {
        uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
        float inputs:clearcoatRoughness = 0
        color3f inputs:diffuseColor = (1, 1, 1) (
            colorSpace = "srgb_displayp3"
        )
        color3f inputs:emissiveColor = (1, 1, 1) (
            colorSpace = "srgb_displayp3"
        )
        float inputs:ior = 0
        float inputs:occlusion = 0
        float inputs:opacity = 0
        float inputs:roughness = 0
        token outputs:out
        float2 ui:nodegraph:node:pos = (-255, 105)
        float2 ui:nodegraph:node:size = (148.5, 199)
        int ui:nodegraph:node:stackingOrder = 6
    }
}

